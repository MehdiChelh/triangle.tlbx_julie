datatable(Final,selection=list( target="none"),extensions=c('Buttons'),class = 'stripe compact',
options=list(dom='t',scrollY=TRUE,scrollX=TRUE,ordering=FALSE,paging=FALSE,searching=FALSE,info=FALSE,
columnDefs=list(list(className='dt-left',targets='cell'),list(targets = 'cell', visible = FALSE))))%>%
formatStyle(columns=colonnes,
backgroundColor = 'lightblue')
})
output$Tot_IBNR <- renderValueBox({
validate(
need(input$LinkratiosCustom_cells_selected != "", "Choix de coefficients requis")
)
validate(
need(input$LinkratiosCustom_cell_clicked != "", "Choix de coefficients requis")
)
Final <- Final()
p<-Final[dim(Final)[1],dim(Final)[2]]
valueBox(      formatC(p, format="d", big.mark=',')       ,
'Total Expected Revenue'      ,
#icon = icon("stats",lib='glyphicon'),
color = "purple")
})
# output$Tot_IBNR <- renderValueBox({     valueBox(      formatC(1000, format="d", big.mark='.')      ,
#                                                      'Total Expected Revenue'      ,
#                                                      icon = icon("gbp",lib='glyphicon')      ,
#                                                      color = "green")
# })
############################################################
#############################CL Bootstrap###################
############################################################
CLBootdataset_chosen <- reactive({
switch(input$dataset_boot,
"RAA" = RAA,
"UKMotor" = UKMotor,
"MW2008"=MW2008,
"MW2014"=MW2014,
"GenIns"=GenIns)
})
observeEvent(input$InfoCLBoot1, {
showModal(modalDialog(
title = "",
includeMarkdown("CLBoot_documentation.md"),
easyClose = TRUE,
footer = modalButton("Close")
))
})
#Reset inputs button
observeEvent(input$ResetCLBootinputs, {
shinyjs::reset("CLBoot_inputpanel")
})
output$Datatri_CLBoot <- DT::renderDataTable({
if(input$Switch_ChainLadder==FALSE){
datasetshow <-dataset_CLInput()
}
if(input$Switch_ChainLadder){
datasetshow <- CLBootdataset_chosen()
}
#show the dataset in raw form as in simple R script.
print(input$Switch_ChainLadder)
datasetshow <-as.data.frame(round(as.matrix.data.frame(datasetshow/as.numeric(input$unitselect_CLBoot))))
if(input$Switch_ChainLadder==FALSE){
rownames(datasetshow) <- rownames(dataset_CLInput())
}
if(input$Switch_ChainLadder){
rownames(datasetshow) <- rownames(CLBootdataset_chosen())
}
datatable(datasetshow, selection = 'none',class = 'stripe compact',
options=list(dom='t',
scrollY=TRUE,scrollX=TRUE,ordering=FALSE,paging=FALSE,searching=FALSE,info=FALSE,
columnDefs=list(list(className='dt-left',targets='_all'))))%>%
formatStyle(colnames(datasetshow),
backgroundColor = styleEqual(NA, c('lightgray')))
})
##function to change process dist
processfunc<-function(value){
if (value==1) {proc="od.pois"}
else if (value==2) {proc="gamma"}
}
##function to reformat bootstrap results for use in DT:Datatable
boottable<-function (bootsumry,useunits) {
#input is BootChainLadder summary output, units for numbers
#produces table with headings latest, Mean ult, Mean Reserve, Total S.D, CV
#with the final row as Total across all cohorts
#start with by origins
sboot_origin<-cbind(
bootsumry$ByOrigin["Latest"]/useunits,
bootsumry$ByOrigin["Mean Ultimate"]/useunits,
bootsumry$ByOrigin["Mean IBNR"]/useunits,
bootsumry$ByOrigin["SD IBNR"]/useunits,
(bootsumry$ByOrigin["SD IBNR"]/bootsumry$ByOrigin["Mean IBNR"])*100
)
colnames(sboot_origin)<-list("Diagonale","Ult' Moyen","Provision Moyenne","ecart-type Provision", "CV(%)")
#now do totals
sboot_total<-cbind(
bootsumry$Totals["Latest:",]/useunits,
bootsumry$Totals["Mean Ultimate:",]/useunits,
bootsumry$Totals["Mean IBNR",]/useunits,
bootsumry$Totals["SD IBNR",]/useunits,
(bootsumry$Totals["SD IBNR",]/bootsumry$Totals["Mean IBNR",])*100
)
colnames(sboot_total)<-list("Diagonale","Ult' Moyen","Provision Moyenne","ecart-type Provision", "CV(%)")
row.names(sboot_total)<-list("Total")
sboot_all<-rbind(sboot_origin,sboot_total)
return(sboot_all)
}
##function to reformat bootstrap percentile results for use in DT:Datatable
bootpercenttable<-function (bootquantile,useunits) {
#input is BootChainLadder qauntile output, units for numbers
#produces table with headings for reserve at default percentile values plus user-defined value
#with the final row as Total across all cohorts
#start with by origins
ncolquant<-ncol(bootquantile$ByOrigin)
finalcolname<-colnames(bootquantile$ByOrigin[ncolquant])
user_percentile<-substr(finalcolname,6,nchar(finalcolname))
sbootquant_origin<-cbind(
bootquantile$ByOrigin["IBNR 50%"]/useunits,
bootquantile$ByOrigin["IBNR 75%"]/useunits,
bootquantile$ByOrigin["IBNR 90%"]/useunits,
bootquantile$ByOrigin["IBNR 95%"]/useunits,
bootquantile$ByOrigin["IBNR 99.5%"]/useunits,
bootquantile$ByOrigin["IBNR 99.9%"]/useunits
,bootquantile$ByOrigin[ncolquant]/useunits
)
colnames(sbootquant_origin)<-list("Reserve 50%","Reserve 75%","Reserve 90%","Reserve 95%","Reserve 99.5%","Reserve 99.9%",paste("Reserve @ choix-utilisateur: ",user_percentile))
#now do totals
sbootquant_total<-cbind(
bootquantile$Totals["IBNR 50%",]/useunits,
bootquantile$Totals["IBNR 75%",]/useunits,
bootquantile$Totals["IBNR 90%",]/useunits,
bootquantile$Totals["IBNR 95%",]/useunits,
bootquantile$Totals["IBNR 99.5%",]/useunits,
bootquantile$Totals["IBNR 99.9%",]/useunits
,bootquantile$Totals[ncolquant,]/useunits
)
colnames(sbootquant_total)<-list("Reserve 50%","Reserve 75%","Reserve 90%","Reserve 95%","Reserve 99.5%","Reserve 99.9%",paste("Reserve @ choix-utilisateur: ",user_percentile))
row.names(sbootquant_total)<-list("Total")
sbootquant_all<-rbind(sbootquant_origin,sbootquant_total)
return(sbootquant_all)
}
###################################################### Calcul des sigmas de Mack #####################################################
MackDT <- reactive({
if(input$Switch_ChainLadder==FALSE){
datasetshow<-dataset_CLInput()
}
if(input$Switch_ChainLadder){
datasetshow<-CLBootdataset_chosen()
}
Charges  <- datasetshow
LR       <- ata(datasetshow)
Residus_2 <- LR[1:dim(LR)[2],]
vwtd <- summary(LR)[dim(summary(LR))[1],]
for(j in 1:dim(Residus_2)[2]){
for(i in 1:dim(Residus_2)[1]){
Residus_2[i,j] <- (Residus_2[i,j] - vwtd[j])^2
}
}
Charges_residuelles <- Residus_2
for(j in 1:dim(Charges_residuelles)[2]){
for(i in 1:dim(Charges_residuelles)[1]){
Charges_residuelles[i,j] <-  Residus_2[i,j]*Charges[i,j]
}
}
Charges_residuelles <- as.data.frame.matrix(Charges_residuelles)
Charges_residuelles[is.na(Charges_residuelles) ] <- 0
SigmaMack <- apply(Charges_residuelles,2,mean)
SigmaMack <- as.data.frame(t(as.data.frame(round(sqrt(SigmaMack),digits=4))))
rownames(SigmaMack) <- c('Sigma')
SigmaMack
})
output$Mack <-DT::renderDataTable({
datatable(MackDT(), selection = 'none',class = 'stripe compact',
options=list(dom='t',
scrollY=TRUE,scrollX=TRUE,ordering=FALSE,paging=FALSE,searching=FALSE,info=FALSE,
columnDefs=list(list(className='dt-left',targets='_all'))))
})
output$MackPlot<-renderHighchart({
MackDTCat <- colnames(MackDT())
MackDT    <- as.numeric(MackDT())
h <- highchart() %>%
# hc_title(text = paste("Fonction de répartition"),
#          style = list(fontSize = "20px")) %>%
hc_xAxis(categories = MackDTCat,title=list(text="Développement") ) %>% #categories=boot_run_fdr ,
hc_yAxis(title = list(text = paste("Distribution des sigmas de Mack"))) %>%
hc_add_series(data = MackDT,type = "spline",  name=paste(""), color="#f0c300")%>%  ##8b0000
hc_tooltip( crosshairs = TRUE,backgroundColor = "white", borderWidth = 2,shared = TRUE)
h
})
###run bootstrap with 1 simulation just to get residuals
output$ui_boot <- renderUI({
if (input$color_type_boot==FALSE)
DT::dataTableOutput('Bootstrap_residuals3')
switch(input$color_type_boot,
"bar_boot" = DT::dataTableOutput('Bootstrap_residuals2'),
"gradient_boot" = formattableOutput('Bootstrap_residuals1')
)
})
output$Bootstrap_residuals1<-renderFormattable({
if(input$Switch_ChainLadder==FALSE){
Initial_boot<-BootChainLadder2_MJ(dataset_CLInput(), 1,process.dist=c(processfunc(input$bootprocessdist)),TRUE,TRUE, FALSE, FALSE)
}
if(input$Switch_ChainLadder){
Initial_boot<-BootChainLadder2_MJ(CLBootdataset_chosen(), 1,process.dist=c(processfunc(input$bootprocessdist)),TRUE,TRUE ,FALSE, FALSE)
}
resid_out<-as.data.frame(Initial_boot$ChainLadder.Residuals[,,1])
if(input$Switch_ChainLadder==FALSE){
colnames(resid_out)<-colnames(dataset_CLInput())
row.names(resid_out)<-row.names(dataset_CLInput())
}
if(input$Switch_ChainLadder){
colnames(resid_out)<-colnames(CLBootdataset_chosen())
row.names(resid_out)<-row.names(CLBootdataset_chosen())
}
resid_out<-round(resid_out,digits=3)
resid_out[is.na(resid_out)] <- ''
formattable(resid_out,list(area(col = colnames(resid_out)) ~ color_tile("green", 'red'))) #%>% #'#f0c300'
})
output$Bootstrap_residuals2<-DT::renderDataTable({
if(input$Switch_ChainLadder==FALSE){
Initial_boot<-BootChainLadder2_MJ(dataset_CLInput(), 1,process.dist=c(processfunc(input$bootprocessdist)),TRUE,TRUE, FALSE, FALSE)
}
if(input$Switch_ChainLadder){
Initial_boot<-BootChainLadder2_MJ(CLBootdataset_chosen(), 1,process.dist=c(processfunc(input$bootprocessdist)),TRUE,TRUE, FALSE, FALSE)
}
resid_out<-as.data.frame(Initial_boot$ChainLadder.Residuals[,,1])
if(input$Switch_ChainLadder==FALSE){
colnames(resid_out)<-colnames(dataset_CLInput())
row.names(resid_out)<-row.names(dataset_CLInput())
}
if(input$Switch_ChainLadder){
colnames(resid_out)<-colnames(CLBootdataset_chosen())
row.names(resid_out)<-row.names(CLBootdataset_chosen())
}
resid_out<-round(resid_out,digits=3)
Color<- ifelse(input$Vision_globale_residus,'#f0c300','white')
datatable(resid_out,   extensions=c('Buttons'),class = 'stripe compact',selection = 'none',
options=list(dom='t',
scrollY=TRUE,scrollX=TRUE,ordering=FALSE,paging=FALSE,searching=FALSE,info=FALSE,
columnDefs=list(list(className='dt-left',targets='_all'))))%>%
formatStyle(colnames(resid_out),
background = styleColorBar(range(na.omit(resid_out)), Color),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center')%>%
formatStyle(colnames(resid_out),
backgroundColor = styleEqual(NA, c('lightgray')))
})
output$Bootstrap_residuals3<-DT::renderDataTable({
if(input$Switch_ChainLadder==FALSE){
Initial_boot<-BootChainLadder2_MJ(dataset_CLInput(), 1,process.dist=c(processfunc(input$bootprocessdist)),TRUE,TRUE, FALSE, FALSE)
}
if(input$Switch_ChainLadder){
Initial_boot<-BootChainLadder2_MJ(CLBootdataset_chosen(), 1,process.dist=c(processfunc(input$bootprocessdist)),TRUE,TRUE, FALSE, FALSE)
}
resid_out<-as.data.frame(Initial_boot$ChainLadder.Residuals[,,1])
if(input$Switch_ChainLadder==FALSE){
colnames(resid_out)<-colnames(dataset_CLInput())
row.names(resid_out)<-row.names(dataset_CLInput())
}
if(input$Switch_ChainLadder){
colnames(resid_out)<-colnames(CLBootdataset_chosen())
row.names(resid_out)<-row.names(CLBootdataset_chosen())
}
resid_out<-round(resid_out,digits=3)
datatable(resid_out,   extensions=c('Buttons'),class = 'stripe compact',selection = 'none',
options=list(dom='t',buttons=list('Copier','Imprimer',list(extend='collection',buttons=c('csv','excel','pdf'),text='Télécharger'))
,scrollY=TRUE,scrollX=TRUE,ordering=FALSE,paging=FALSE,searching=FALSE,info=FALSE,
columnDefs=list(list(className='dt-left',targets='_all'))))%>%
formatStyle(colnames(resid_out),
backgroundColor = styleEqual(NA, c('lightgray')))
})
output$ui_bootSimple <- renderUI({
if (input$color_type_boot==FALSE)
DT::dataTableOutput('Bootstrap_residualsSimple3')
switch(input$color_type_boot,
"bar_boot" = DT::dataTableOutput('Bootstrap_residualsSimple2'),
"gradient_boot" = formattableOutput('Bootstrap_residualsSimple1')
)
})
output$Bootstrap_residualsSimple1<-renderFormattable({
if(input$Switch_ChainLadder==FALSE){
Initial_boot<-BootChainLadder2_MJ(dataset_CLInput(), 1,process.dist=c(processfunc(input$bootprocessdist)),TRUE,TRUE, FALSE, FALSE)
}
if(input$Switch_ChainLadder){
Initial_boot<-BootChainLadder2_MJ(CLBootdataset_chosen(), 1,process.dist=c(processfunc(input$bootprocessdist)),TRUE,TRUE, FALSE, FALSE)
}
resid_SimpleOut<-as.data.frame(Initial_boot$Unscaled.Residuals[,,1])
if(input$Switch_ChainLadder==FALSE){
colnames(resid_SimpleOut)<-colnames(dataset_CLInput())
row.names(resid_SimpleOut)<-row.names(dataset_CLInput())
}
if(input$Switch_ChainLadder){
colnames(resid_SimpleOut)<-colnames(CLBootdataset_chosen())
row.names(resid_SimpleOut)<-row.names(CLBootdataset_chosen())
}
resid_SimpleOut<-round(resid_SimpleOut,digits=3)
resid_SimpleOut[is.na(resid_SimpleOut)] <- ''
formattable(resid_SimpleOut,list(area(col = colnames(resid_SimpleOut)) ~ color_tile("green", 'red'))) #%>% #'#f0c300'
})
output$Bootstrap_residualsSimple2<-DT::renderDataTable({
if(input$Switch_ChainLadder==FALSE){
Initial_boot<-BootChainLadder2_MJ(dataset_CLInput(), 1,process.dist=c(processfunc(input$bootprocessdist)),TRUE,TRUE, FALSE, FALSE)
}
if(input$Switch_ChainLadder){
Initial_boot<-BootChainLadder2_MJ(CLBootdataset_chosen(), 1,process.dist=c(processfunc(input$bootprocessdist)),TRUE,TRUE, FALSE, FALSE)
}
resid_SimpleOut<-as.data.frame(Initial_boot$Unscaled.Residuals[,,1])
if(input$Switch_ChainLadder==FALSE){
colnames(resid_SimpleOut)<-colnames(dataset_CLInput())
row.names(resid_SimpleOut)<-row.names(dataset_CLInput())
}
if(input$Switch_ChainLadder){
colnames(resid_SimpleOut)<-colnames(CLBootdataset_chosen())
row.names(resid_SimpleOut)<-row.names(CLBootdataset_chosen())
}
resid_SimpleOut<-round(resid_SimpleOut,digits=3)
Color<- ifelse(input$Vision_globale_residus,'#f0c300','white')
datatable(resid_SimpleOut,   extensions=c('Buttons'),class = 'stripe compact',selection = 'none',
options=list(dom='t',
scrollY=TRUE,scrollX=TRUE,ordering=FALSE,paging=FALSE,searching=FALSE,info=FALSE,
columnDefs=list(list(className='dt-left',targets='_all'))))%>%
formatStyle(colnames(resid_SimpleOut),
background = styleColorBar(range(na.omit(resid_SimpleOut)), Color),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center')%>%
formatStyle(colnames(resid_SimpleOut),
backgroundColor = styleEqual(NA, c('lightgray')))
})
output$Bootstrap_residualsSimple3<-DT::renderDataTable({
if(input$Switch_ChainLadder==FALSE){
Initial_boot<-BootChainLadder2_MJ(dataset_CLInput(), 1,process.dist=c(processfunc(input$bootprocessdist)),TRUE,TRUE, FALSE, FALSE)
}
if(input$Switch_ChainLadder){
Initial_boot<-BootChainLadder2_MJ(CLBootdataset_chosen(), 1,process.dist=c(processfunc(input$bootprocessdist)),TRUE,TRUE, FALSE, FALSE)
}
resid_SimpleOut<-as.data.frame(Initial_boot$Unscaled.Residuals[,,1])
if(input$Switch_ChainLadder==FALSE){
colnames(resid_SimpleOut)<-colnames(dataset_CLInput())
row.names(resid_SimpleOut)<-row.names(dataset_CLInput())
}
if(input$Switch_ChainLadder){
colnames(resid_SimpleOut)<-colnames(CLBootdataset_chosen())
row.names(resid_SimpleOut)<-row.names(CLBootdataset_chosen())
}
resid_SimpleOut<-round(resid_SimpleOut,digits=3)
datatable(resid_SimpleOut,   extensions=c('Buttons'),class = 'stripe compact',selection = 'none',
options=list(dom='t',buttons=list('Copier','Imprimer',list(extend='collection',buttons=c('csv','excel','pdf'),text='Télécharger'))
,scrollY=TRUE,scrollX=TRUE,ordering=FALSE,paging=FALSE,searching=FALSE,info=FALSE,
columnDefs=list(list(className='dt-left',targets='_all'))))%>%
formatStyle(colnames(resid_SimpleOut),
backgroundColor = styleEqual(NA, c('lightgray')))
})
#######action button to run bootstrap
observeEvent(input$Runboot,{
#now all the code below only runs when input$Runboot changes
#add user-defined percentile value to list of default percentile values
Percent_values<-c(Percent_values,input$Boot_percentile/100)
if (input$seedoption==1) {set.seed(input$CLBootstrap_seed)}
else if (input$seedoption==0) {set.seed(NULL)}
if(input$Switch_ChainLadder==FALSE){
Bootresults<-BootChainLadder2_MJ(dataset_CLInput(), input$Boot_sims,process.dist=c(processfunc(input$bootprocessdist)),input$Param,TRUE, FALSE, FALSE)
}
if(input$Switch_ChainLadder){
Bootresults<-BootChainLadder2_MJ(CLBootdataset_chosen(), input$Boot_sims,process.dist=c(processfunc(input$bootprocessdist)),input$Param,TRUE, FALSE, FALSE)
}
#Bootresults is a list with items such as Triangle, CL factors, all simulations in an array etc.
output$Bootstrap_results<-DT::renderDataTable({
Bootsumry<-summary(Bootresults)
Summarytoshow<-boottable(Bootsumry,as.numeric(input$unitselect_CLBoot))
Summarytoshow<-round(Summarytoshow,digits=0)
Summarytoshow
},
extensions=c('Buttons'),selection='none',class = 'stripe compact',
options=list(dom='Bfrtip',
scrollY=TRUE,scrollX=TRUE,ordering=FALSE,paging=FALSE,searching=FALSE,info=FALSE,
columnDefs=list(list(className='dt-right',targets='_all'))))
# output$Bootstrap_graphs1<-renderHighchart({
#   boot_run<-Bootresults
#   boot_run_10000 <- table(floor(boot_run$IBNR.Total/input$amp)*input$amp)
#   Montants_IBNR  <- as.numeric(as.character(names(boot_run_10000)))
#   boot_run_10000  <- as.data.frame(boot_run_10000)
#   boot_run_10000$Montants_IBNR <- Montants_IBNR
#   names(boot_run_10000)        <- c("Nbre","Montants_IBNR")
#
#
#
#   h <- highchart() %>%
#     hc_title(text = paste("Histogramme des IBNR totaux simulés"),
#              style = list(fontSize = "20px")) %>%
#
#     hc_xAxis(#categories = as.numeric(as.character(names(boot_run_10000))),
#              title=list(text="Montants d'IBNR"),
#              # plotLines=list(
#              #   list(
#              #     color='#FF0000',
#              #     width=2,
#              #     value=mean(boot_run$IBNR.Total)
#              #   ),
#              #   list(
#              #     color='#FF0000',
#              #     width=2,
#              #     value=50000
#              #   )
#              # )
#              plotLines=list(
#                list(
#                  color='#FF0000',
#                  width=2,
#                  value=mean(boot_run_10000$Montants_IBNR)
#                ),
#                list(
#                  color='#7fb3d5',
#                  width=2,
#                  value=input$Tot_IBNR*input$unitselect/input$unitselect_CLBoot
#                )
#              )
#            ) %>%
#     hc_yAxis(title = list(text = paste("Nombre de simulations"))) %>%
#     hc_add_series(data = boot_run_10000,
#                   x=Montants_IBNR,
#                   y=Nbre,
#                   type = "line",   name=paste("Montants d'IBNR"),color="#f0c300")%>% ##8b0000
#     hc_tooltip( crosshairs = TRUE,backgroundColor = "white", borderWidth = 2,shared = TRUE)
#
#   h
#  })
output$Bootstrap_graphs1<-renderPlotly({
boot_run<-Bootresults
boot_run_10000  <- as.data.frame(floor(boot_run$IBNR.Total/input$amp)*input$amp)
Final <- Final()
deter <- Final[dim(Final)[1],dim(Final)[2]]*as.numeric(as.character(input$unitselect))
sto   <- mean(boot_run$IBNR.Total)
if(input$Recentrage==TRUE){
if(input$methode=="additive"){
boot_run_10000 <- as.data.frame(floor((boot_run$IBNR.Total-sto+deter)/input$amp)*input$amp)
print('add')
print(mean(boot_run_10000[,1]))
print(head(boot_run_10000))
}
if(input$methode=="multiplicative"){
boot_run_10000 <- as.data.frame(floor((boot_run$IBNR.Total*deter/sto)/input$amp)*input$amp)
print('mult')
print(mean(boot_run_10000[,1]))
print(head(boot_run_10000))
}
sto            <- mean(boot_run_10000[,1])
print(sto)
print(deter)
print(input$Recentrage)
print(input$methode)
# if(input$mult){
#
#   }
}
names(boot_run_10000)        <- c("Montants_IBNR")
h <- ggplotly(
ggplot(boot_run_10000) +
geom_bar(aes(x=Montants_IBNR),color="#f2f3f4",fill="#f0c300")+
#geom_line(aes(x=Montants_IBNR),color="#f0c300")+
geom_vline(aes(xintercept=sto,colour='stochastique'))+
geom_vline(aes(xintercept=deter,colour='deterministe'))+
theme_minimal()+
#ggtitle('Histogramme de simulations de charges')+
xlab("Montants d'IBNR")+
ylab('Effectif dans les simulations')+
scale_colour_manual("Moyennes",
values = c(stochastique="red",deterministe="lightblue"))
)
h
})
output$Bootstrap_graphs2<-renderHighchart({
boot_run<-Bootresults
boot_run_fdr <- table(floor(boot_run$IBNR.Total/input$amp)*input$amp)
boot_run_fdr <- as.data.frame(cumsum(boot_run_fdr)/sum(table(floor(boot_run$IBNR.Total/input$amp)*input$amp)))
boot_run_fdr <- cbind(rownames(boot_run_fdr),boot_run_fdr)
names(boot_run_fdr) <- c('Quantiles','Fdr')
h <- highchart() %>%
# hc_title(text = paste("Fonction de répartition"),
#          style = list(fontSize = "20px")) %>%
hc_xAxis(categories = boot_run_fdr$Quantiles,title=list(text="Quantiles") ) %>% #categories=boot_run_fdr ,
hc_yAxis(title = list(text = paste("Fdr()"))) %>%
hc_add_series(data = boot_run_fdr$Fdr,type = "spline",  name=paste("Répartition des IBNR"), color="#f0c300")%>%  ##8b0000
hc_tooltip( crosshairs = TRUE,backgroundColor = "white", borderWidth = 2,shared = TRUE)
h
})
output$Bootstrap_graphs3<-renderPlot({
boot_run<-Bootresults
plot(boot_run,which=3)
print(boot_run)
})
output$Bootstrap_graphs4<-renderPlot({
boot_run<-Bootresults
plot(boot_run,which=4)
})
output$Bootstrap_percentiles<-DT::renderDataTable({
quantiles_run<-quantile(Bootresults,probs=Percent_values)
percentiles_toshow<-bootpercenttable(quantiles_run,as.numeric(input$unitselect_CLBoot))
percentiles_toshow<-round(percentiles_toshow,digits=0)
percentiles_toshow
},
extensions=c('Buttons'),selection='none',class = 'stripe compact',
options=list(dom='Bfrtip',buttons=list('copy','print',list(extend='collection',buttons=c('csv','excel','pdf'),text='Download'))
,scrollY=TRUE,scrollX=TRUE,ordering=FALSE,paging=FALSE,searching=FALSE,info=FALSE,
columnDefs=list(list(className='dt-right',targets='_all'))))
}) # Reactive ends
hide(id = "loading-content", anim = TRUE, animType = "fade")
}      #end the server stuff
shinyApp(ui=uiOutil,server=serverOutil, options=list(host="127.0.0.1", port=7, quiet=FALSE,workerId=""))
View(Plot_ggplot)
View(Plot_ggplot)
View(Plot_ggplot)
View(Plot_ggplot)
View(Plot_ggplot)
View(Plot_ggplot)
